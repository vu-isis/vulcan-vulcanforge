#
# VF development environment configuration
#
# The %(here)s variable will be replaced with the parent directory of this file
#

[DEFAULT]
debug = true

### Error emails
#
# uncomment email_to to enable the sending of emails on 500 errors
#
# email_to = bob@example.com
smtp_server = localhost
smtp_port = 8826
error_email_from = vf_error@localhost

### websocket server setup
#
# websocket.enabled works by enabling/disabling loading of websocket javascript
#
websocket.enabled = true
websocket.host = 0.0.0.0
websocket.port = 8002

# websocket.process_count defaults to the result of multiprocessing.cpu_count()
#
# websocket.process_count = 1

#
# websocket.auth_api_root should point to the HTTP app web services root
# used by the websocket server for auth calls
#
websocket.auth_api_root = http://0.0.0.0:8080/webs/websocket

event_queue.name = event_queue
event_queue.namespace = eventd

[server:main]
use = egg:Paste#http
host = 0.0.0.0
port = 8001

#[filter-app:profile]
#use=egg:keas.profile#profiler
#next=main

[app:main]
use = egg:{{project}}

### Development tools
#
# WARNING: debug MUST BE SET TO true ON A PRODUCTION ENVIRONMENT*
# Debug mode will enable the interactive debugging tool, allowing ANYONE to
# execute malicious code after an exception is raised.
#
# set debug = false

#
# Set auto_reload_templates to false for faster performance (usually recommended
# for production environments). If set to false, restarting the application
# will be necessary to pickup changes in templates
#
auto_reload_templates = true

#
# if profile_middleware is enabled, developers can call c.log_time at various
# points in the code to log timing performance of the application to help
# determine the location of bottlenecks. Such calls are ignored when
# profile_middleware is set to false
#
profile_middleware = true

#
# base_url is used to create fully qualified urls throughout the forge.
#
base_url = http://localhost:8080

### Beaker Session global settings
#
# set validate_key and encrypt_key to randomly generated strings
#
beaker.session.key = vehicleforge
beaker.session.type = cookie
beaker.session.validate_key = YOUR_RANDOM_STRING
beaker.session.encrypt_key = ANOTHER_RANDOM_STRING

#
# if secure is set to true, will insist on ssl when sending cookies
#
beaker.session.secure = false

# beaker.session.timeout =
# beaker.cache.data_dir = %(here)s/data/cache
# beaker.session.data_dir = %(here)s/data/sessions

### s3 settings
s3.enabled = true
s3.connect_string =
s3.password =
s3.ip_address =
s3.port = 443
s3.ssl = true
s3.bucket_name =
s3.tempurlkey =
s3.account_name =
s3.app_prefix = Allura
#
# s3.serve_local determines whether urls generated by the forge should point
# directly to objects in s3 or whether they should be proxied through the forge
# for auth purposes
#
s3.serve_local = true

### Ming setup
#
# defaults to assume mongod is running locally listening on 27017
#
ming.main.uri = mongodb://127.0.0.1:27017
ming.main.database = allura
ming.main.replica_set =
ming.main.read_preference = SECONDARY
ming.main.auto_ensure_indexes = false
ming.project.uri = mongodb://127.0.0.1:27017
ming.project.database = project-data
ming.project.replica_set =
ming.project.read_preference = SECONDARY
ming.project.auto_ensure_indexes = false

### SOLR setup
#
# defaults to assume solr is running locally listening on 8983
#
solr.host = localhost
solr.port = 8983
solr.vulcan.core = vulcan

{%- if repo %}

### Repository Setup
#
scm.domain = localhost
scm.repos.root = /tmp
scm.fs_prefix = projects
#
# override tool-specific domains here
#
# scm.domain.git = localhost
# scm.domain.svn = localhost
# scm.port.http = 80
# scm.port.https = 443
# scm.port.ssh = 22
#
# you can also override ports by tool. e.g.:
#   scm.port.http.git = 8080
{%- endif %}

### Forgemail server
forgemail.host = 0.0.0.0
forgemail.port = 8025
forgemail.domain =
forgemail.url = http://localhost:8080
forgemail.return_path = noreply@localhost

### General Forge configuration
#
# header_logo is the logo in the top left of the screen
#
header_logo = images/vf_logo_header_short.png

#
# site_admin_project contains tools that allow one to administer forge-wide
# behavior
#
site_admin_project = forgeadmin

#
# page the user is redirected to after login. Can be overriden on a per-user
# basis with the User.preferences.login_landing_url property
#
# login_landing_url = /dashboard/

#
# A forge by any other name...
#
forge_name = {{project}}

#
# cls to use by default for new neighborhoods. To install a neighborhood from
# the command line, use paster create-neighborhood
#
default_nbhd_controller = vulcanforge.neighborhood.controllers:NeighborhoodController

#
# Appears at the end of the html title tag for each page. See the title block
# in the master template
#
title_postfix =

#
# relative path to favicon within the forge
#
# favicon_path = favicon.ico

#
# override_root allows one to override the root controller. For example, one
# could create a file in the controllers directory called myroot.py and an
# object therein called MyRootController. Then, set override_root = myroot and
# viola.
#
# override_root =

### Tool Manager
#
# tool_manager specifies which tools are available for teams in this forge
#
tool_manager = {{package}}.config.tool_manager:ToolManager

### Visualizers
#
# Determines which visualizers are enabled to view content throughout the forge.
# To ensure their installation, run paster sync_visualizers. The format of the
# specification below is visualizer.<shortname> = <path_to_visualizer>
#
visualizer.syntax = vulcanforge.visualize.syntax:SyntaxVisualizer
visualizer.image = vulcanforge.visualize.image:ImageVisualizer
visualizer.pdf = vulcanforge.visualize.pdf:PDFVisualizer

### Commit Hooks
#
# Triggered on each repo commit. To ensure installation, run
# paster sync_commit_hooks.
# Config format is commit_hook.<shortname> = <path_to_commit_hook>
#
commit_hook.visualizer = vulcanrepo.base.model.hook:VisualizerHook

### Global Navigation
#
# Customize entries in the global navigation menu
#
masternav.root_items = browseprojects browseusers
masternav.items.browseprojects.label = Browse All Projects
masternav.items.browseprojects.href = /browse/
masternav.items.browseprojects.icon = images/forge_toolbar_icons/projects_icon_on.png
masternav.items.browseprojects.icon_is_resource = true
masternav.items.browseusers.label = Browse All Users
masternav.items.browseusers.href = /designers/
masternav.items.browseusers.icon = images/forge_toolbar_icons/designers_icon_on.png
masternav.items.browseusers.icon_is_resource = true

### Security
#
# if moderate_registration is true, new users must be approved by admins of the
# site_admin_project to complete registration
#
moderate_registration = true

#
# auth_provider is an object that handles the authentication logic for the
# application. If using LDAP, change it to
# vulcanforge.auth.authentication_provider:LdapAuthenticationProvider
#
# auth_provider = vulcanforge.auth.authentication_provider:LocalAuthenticationProvider

#
# security_manager handles authorization for the application.
#
# security_manager = vulcanforge.auth.security_manager:SecurityManager

#
# urls for login and logout redirects
#
# auth.login_url = /auth/
# auth.logout_url = /auth/logout

#
# auth.pw.lifetime parameters determine the length of time a password is valid
# before a user needs to reset his/her password. Passwords are expired by
# running paster expire-passwords. It is recommended to run this command from a
# cron job to support this functionality.
#
# auth.pw.lifetime.months = 6
# auth.pw.lifetime.weeks = 0
# auth.pw.lifetime.days = 0
# auth.pw.lifetime.hours = 0
# auth.pw.lifetime.minutes = 0

#
# Place limits on the length of passwords. A max_length is necessary to prevent
#
#
# Warning: Changing these limits on a live deployment will block users from
# logging in whose passwords do not conform to these restrictions with an
# "invalid password" error message.
#
# auth.pw.min_length = 10
# auth.pw.max_length = 512

#
# Number of generations determines how many old passwords to store in the
# database. Users cannot reset their password to any of their old passwords.
#
# auth.pw.generations = 10

#
# If min_levenshtein is set, it prevents users from changing their password
# to anything too similar to their old password. It accepts an integer value
# representing the Levenshtein distance between the two passwords.
#
# auth.pw.min_levenshtein = 0

#
# inactivity_period will disable user account after x months without a login.
# To disable users, one must run paster expire-users
#
# auth.user.inactivity_period = 6

#
# visibility_mode set to closed will disable all pages but the login for unauthenticated users
#
# visibility_mode = open

#
# visbility_holes are comma separated regex expressions that allow certain additional
# uris for unauthenticated users when visibility_mode is closed
#
# visibility_holes =

#
# login_lock settings prevent brute force attacks by rate limiting failed login
# attempts. When engaged, no more than num failed logins are allowed per
# interval minutes
#
# login_lock.engaged = false
# login_lock.num =
# login_lock.interval =

#
# idle_logout settings automatically log a user out after a period of inactivity
#
# idle_logout.enabled = false
# idle_logout.minutes =
# idle_logout.countdown_seconds =

#
# ldap configuration settings. Only used if auth_provider is set to use ldap
#
# auth.ldap.server = ldap://localhost
# auth.ldap.suffix = ou=people,dc=localdomain
# auth.ldap.admin_dn = cn=admin,dc=localdomain
# auth.ldap.admin_password =
# auth.ldap.schroot_name =

### Artifact API
#
# Artifact-specific API for shortlinks, relations, etc.
#
artifact_api = vulcanrepo.artifact:RepoArtifactAPI

### Task queue setup for taskd service.
#
# Queue class used for queueing action. Uses redis by default
#
# task_queue.cls = vulcanforge.taskd.queue:RedisQueue

#
# Override the following properties if using a separate redis for task service.
# Otherwise, it will use the settings specified in the redis section above.
#
# task_queue.host = localhost
# task_queue.port = 6379

#
# Queue naming properties
#
# task_queue.name = task_queue
# task_queue.namespace = taskd

#
# timeout will cause task_queue to poll every timeout seconds in addition to
# waiting on the queue
#
# task_queue.timeout =

#
# monq.poll_interval is ignored if using message queue
#
monq.poll_interval = 2

### special templates used throughout the framework
#
# templates.master determines the base template for all pages throughout the
# framework and application
#
# templates.master = vulcanforge.common:templates/jinja_master/master.html

#
# templates.login displays the login template @ /auth/login
#
# templates.login = vulcanforge:auth/templates/login.html

#
# templates.macros provides global macros available for all templates
#
# templates.macros = vulcanforge.common:templates/jinja_master/master_macros.html

#
# load_initial_data indicates a json file used to seed initial data for the
# application when paster setup-app is executed
#
# load_initial_data =

### Static Resources
no_redirect.pattern = ^/nf/\d+/_(ew|static)_/.*|^/rest/.*
#
# script_name is the path that is handled by the application
#
ew.script_name = /nf/%(build_key)s/_ew_/
static.script_name = /nf/%(build_key)s/_static_/

#
# url_base is the prefix that references to the static resources should have
#
ew.url_base = /nf/%(build_key)s/_ew_/
static.url_base = /nf/%(build_key)s/_static_/

#
# build_key used to uniquify references to static resources
#
build_key = 6661

full_stack = true
cache_dir = %(here)s/data

# WARNING enabling the stats application has far reaching consequences
# stats.sample.rate = 1
stats.sample_rate = 0

### OpenID setup (not currently used)
# openid.realm =

#-------------------------------------------------------------------------------
# Testing setup
#-------------------------------------------------------------------------------

[app:test]
use = main
db_prefix = test_
testing_testing = true
trustforge.url =

base_url = http://localhost/

# solr.mock = false

forgemail.host = 0.0.0.0
forgemail.port = 8825
forgemail.domain = .vulcantest.org
forgemail.url = http://localhost:8080

load_test_data = true
cache_test_data = false

# Set the locations of some static resources
#  script_name is the path that is handled by the application
#  url_base is the prefix that references to the static resources should have
ew.script_name = /nf/_ew_/
ew.url_base = /nf/_ew_/
static.script_name = /nf/_static_/
static.url_base = /nf/_static_/

scm.fs_prefix = p
scm.domain = localhost
scm.repos.root = /

stats.sample_rate = 0

disable_csrf_protection = true
disable_captcha_validation = true

override_root = test
bootstrap_initial_data = true

login_lock.engaged = false

s3.serve_local = true

[app:test_without_authn]
use = test
skip_authentication = True

[app:test_moderated]
use = test_without_authn
visibility_mode = closed

[validation]
validate_html5 = false
validate_inlinejs = false

[app:task]
use = main
override_root = task

[app:event]
use = main
override_root = event

[websocketserver]

# Logging configuration
# Add additional loggers, handlers, formatters here
# Uses python's logging config file format
# http://docs.python.org/lib/logging-config-fileformat.html

[loggers]
keys = root, {{package}}, vulcanforge, vulcanforgecommand, vulcanrepo, paste, redis, pylons, pysolr

[handlers]
keys = console, stats

[formatters]
keys = generic, stats

# If you create additional loggers, add them as a key to [loggers]
[logger_root]
#level = WARN
level = INFO
handlers = console, stats

[logger_{{package}}]
#level = WARN
level = DEBUG
handlers =
qualname = {{package}}

[logger_vulcanforge]
level = INFO
handlers =
qualname = vulcanforge

{%- if repo %}

[logger_vulcanrepo]
level = INFO
handlers =
qualname = vulcanrepo
{%- endif %}

[logger_pysolr]
level = WARN
handlers =
qualname = pysolr

[logger_paste]
level = INFO
qualname = paste
handlers =

[logger_redis]
level = INFO
qualname = redis
handlers =

[logger_pylons]
level = INFO
qualname = pylons
handlers =

# If you create additional handlers, add them as a key to [handlers]
[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_stats]
class = vulcanforge.common.util.log.StatsHandler
args = ('rtstats.log', '{{package}}', 1)
level = NOTSET
formatter = stats

# If you create additional formatters, add them as a key to [formatters]
[formatter_generic]
class = vulcanforge.common.util.log.BlockFormatter
format = %(asctime)s,%(msecs)03d %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %Y/%m/%d %H:%M:%S

[formatter_stats]
format = %(asctime)s %(created)d %(kwpairs)s
datefmt = %d/%b/%Y:%H:%M:%S UTC
