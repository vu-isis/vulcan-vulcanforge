<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
 This is a stripped down config file used for a simple example...
 It is *not* a good example to work from.
-->
<config>
    <updateHandler class="solr.DirectUpdateHandler2" />

    <requestDispatcher handleSelect="true" >
        <requestParsers enableRemoteStreaming="false" multipartUploadLimitInKB="2048" />
    </requestDispatcher>

    <requestHandler name="standard" class="solr.StandardRequestHandler" default="true" />
    <requestHandler name="/update" class="solr.XmlUpdateRequestHandler" />
    <requestHandler name="/admin/" class="org.apache.solr.handler.admin.AdminHandlers" />

    <!-- config for the admin interface -->
    <admin>
        <defaultQuery>solr</defaultQuery>
    </admin>

    <query>
        <!-- Maximum number of clauses in a boolean query... can affect range
             or wildcard queries that expand to big boolean queries.
             An exception is thrown if exceeded.
        -->
        <maxBooleanClauses>1024</maxBooleanClauses>
        <!-- Cache used by SolrIndexSearcher for filters (DocSets),
          unordered sets of *all* documents that match a query.
          When a new searcher is opened, its caches may be prepopulated
          or "autowarmed" using data from caches in the old searcher.
          autowarmCount is the number of items to prepopulate.  For LRUCache,
          the autowarmed items will be the most recently accessed items.
        Parameters:
          class - the SolrCache implementation (currently only LRUCache)
          size - the maximum number of entries in the cache
          initialSize - the initial capacity (number of entries) of
            the cache.  (seel java.util.HashMap)
          autowarmCount - the number of entries to prepopulate from
            and old cache.
        -->
        <filterCache
                class="solr.LRUCache"
                size="4096"
                initialSize="1024"
                autowarmCount="0"/>

        <!-- queryResultCache caches results of searches - ordered lists of
        document ids (DocList) based on a query, a sort, and the range
        of documents requested.
        -->
        <queryResultCache
                class="solr.LRUCache"
                size="4096"
                initialSize="1024"
                autowarmCount="0"/>

        <!-- documentCache caches Lucene Document objects (the stored fields for each document).
        Since Lucene internal document ids are transient, this cache will not be autowarmed.
        -->
        <documentCache
                class="solr.LRUCache"
                size="4096"
                initialSize="2048"
                autowarmCount="0"/>

        <!-- An optimization that attempts to use a filter to satisfy a search.
           If the requested sort does not include a score, then the filterCache
           will be checked for a filter matching the query.  If found, the filter
           will be used as the source of document ids, and then the sort will be
           applied to that.
        -->
        <useFilterForSortedQuery>true</useFilterForSortedQuery>

        <!-- An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, of a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 50 will be collected and cached. Any further
             requests in that range can be satisfied via the cache.
        -->
        <queryResultWindowSize>50</queryResultWindowSize>

        <!-- This entry enables an int hash representation for filters (DocSets)
            when the number of items in the set is less than maxSize. For smaller
            sets, this representation is more memory efficient, more efficient to
            iterate over, and faster to take intersections.
        -->
        <HashDocSet maxSize="3000" loadFactor="0.75"/>


        <!-- boolToFilterOptimizer converts boolean clauses with zero boost
             cached filters if the number of docs selected by the clause exceeds the
             threshold (represented as a fraction of the total index)
        -->
        <boolTofilterOptimizer enabled="true" cacheSize="32" threshold=".05"/>

        <!-- Lazy field loading will attempt to read only parts of documents on disk that are
             requested.  Enabling should be faster if you aren't retrieving all stored fields.
        -->
        <enableLazyFieldLoading>false</enableLazyFieldLoading>
    </query>
</config>

